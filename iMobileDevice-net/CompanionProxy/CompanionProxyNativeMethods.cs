//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// <copyright file="CompanionProxyNativeMethods.cs" company="Quamotion">
// Copyright (c) 2016-2021 Quamotion. All rights reserved.
// Copyright (c) 2022-2024 Wayne Bonnici.
// </copyright>
#pragma warning disable 1591
#pragma warning disable 1572
#pragma warning disable 1573

namespace iMobileDevice.CompanionProxy
{
    using System.Runtime.InteropServices;
    using System.Diagnostics;
    using iMobileDevice.iDevice;
    using iMobileDevice.Lockdown;
    using iMobileDevice.Afc;
    using iMobileDevice.Plist;
    
    
    public partial class CompanionProxyNativeMethods
    {
        
        public const string LibraryName = "libimobiledevice";
        
        static CompanionProxyNativeMethods()
        {
            LibraryResolver.EnsureRegistered();
        }
        
        /// <summary>
        /// Connects to the companion_proxy service on the specified device.
        /// </summary>
        /// <param name="device">
        /// The device to connect to.
        /// </param>
        /// <param name="service">
        /// The service descriptor returned by lockdownd_start_service.
        /// </param>
        /// <param name="client">
        /// Pointer that will point to a newly allocated
        /// companion_proxy_client_t upon successful return. Must be freed using
        /// companion_proxy_client_free() after use.
        /// </param>
        /// <returns>
        /// COMPANION_PROXY_E_SUCCESS on success, COMPANION_PROXY_E_INVALID_ARG when
        /// the arguments are invalid, or an COMPANION_PROXY_E_* error code otherwise.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute(CompanionProxyNativeMethods.LibraryName, EntryPoint="companion_proxy_client_new", CallingConvention=System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public static extern CompanionProxyError companion_proxy_client_new(iDeviceHandle device, LockdownServiceDescriptorHandle service, out CompanionProxyClientHandle client);
        
        /// <summary>
        /// Starts a new companion_proxy service on the specified device and connects to it.
        /// </summary>
        /// <param name="device">
        /// The device to connect to.
        /// </param>
        /// <param name="client">
        /// Pointer that will point to a newly allocated
        /// companion_proxy_client_t upon successful return. Must be freed using
        /// companion_proxy_client_free() after use.
        /// </param>
        /// <param name="label">
        /// The label to use for communication. Usually the program name.
        /// Pass NULL to disable sending the label in requests to lockdownd.
        /// </param>
        /// <returns>
        /// COMPANION_PROXY_E_SUCCESS on success, or an COMPANION_PROXY_E_* error
        /// code otherwise.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute(CompanionProxyNativeMethods.LibraryName, EntryPoint="companion_proxy_client_start_service", CallingConvention=System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public static extern CompanionProxyError companion_proxy_client_start_service(iDeviceHandle device, out CompanionProxyClientHandle client, [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.LPStr)] string label);
        
        /// <summary>
        /// Disconnects a companion_proxy client from the device and frees up the
        /// companion_proxy client data.
        /// </summary>
        /// <param name="client">
        /// The companion_proxy client to disconnect and free.
        /// </param>
        /// <returns>
        /// COMPANION_PROXY_E_SUCCESS on success, COMPANION_PROXY_E_INVALID_ARG when
        /// client is NULL, or an COMPANION_PROXY_E_* error code otherwise.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute(CompanionProxyNativeMethods.LibraryName, EntryPoint="companion_proxy_client_free", CallingConvention=System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public static extern CompanionProxyError companion_proxy_client_free(System.IntPtr client);
        
        /// <summary>
        /// Sends a plist to the service.
        /// </summary>
        /// <param name="client">
        /// The companion_proxy client
        /// </param>
        /// <param name="plist">
        /// The plist to send
        /// </param>
        /// <returns>
        /// COMPANION_PROXY_E_SUCCESS on success,
        /// COMPANION_PROXY_E_INVALID_ARG when client or plist is NULL
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute(CompanionProxyNativeMethods.LibraryName, EntryPoint="companion_proxy_send", CallingConvention=System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public static extern CompanionProxyError companion_proxy_send(CompanionProxyClientHandle client, PlistHandle plist);
        
        /// <summary>
        /// Receives a plist from the service.
        /// </summary>
        /// <param name="client">
        /// The companion_proxy client
        /// </param>
        /// <param name="plist">
        /// The plist to store the received data
        /// </param>
        /// <returns>
        /// COMPANION_PROXY_E_SUCCESS on success,
        /// COMPANION_PROXY_E_INVALID_ARG when client or plist is NULL
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute(CompanionProxyNativeMethods.LibraryName, EntryPoint="companion_proxy_receive", CallingConvention=System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public static extern CompanionProxyError companion_proxy_receive(CompanionProxyClientHandle client, out PlistHandle plist);
        
        /// <summary>
        /// Retrieves a list of paired devices.
        /// </summary>
        /// <param name="client">
        /// The companion_proxy client
        /// </param>
        /// <param name="pairedDevices">
        /// Point that will receive a PLIST_ARRAY with paired device UDIDs
        /// </param>
        /// <returns>
        /// COMPANION_PROXY_E_SUCCESS on success,
        /// COMPANION_PROXY_E_NO_DEVICES if no devices are paired,
        /// or a COMPANION_PROXY_E_* error code otherwise.
        /// </returns>
        /// <remarks>
        /// The device closes the connection after sending the reply.
        /// </remarks>
        [System.Runtime.InteropServices.DllImportAttribute(CompanionProxyNativeMethods.LibraryName, EntryPoint="companion_proxy_get_device_registry", CallingConvention=System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public static extern CompanionProxyError companion_proxy_get_device_registry(CompanionProxyClientHandle client, out PlistHandle pairedDevices);
        
        /// <summary>
        /// Starts listening for paired devices.
        /// </summary>
        /// <param name="client">
        /// The companion_proxy client
        /// </param>
        /// <param name="callback">
        /// Callback function that will be called when a new device is detected
        /// </param>
        /// <param name="userdata">
        /// Pointer that that will be passed to the callback function
        /// </param>
        /// <returns>
        /// COMPANION_PROXY_E_SUCCESS on success,
        /// or a COMPANION_PROXY_E_* error code otherwise.
        /// </returns>
        /// <remarks>
        /// The event parameter that gets passed to the callback function is
        /// freed internally after returning from the callback. The consumer needs
        /// to make a copy if required.
        /// </remarks>
        [System.Runtime.InteropServices.DllImportAttribute(CompanionProxyNativeMethods.LibraryName, EntryPoint="companion_proxy_start_listening_for_devices", CallingConvention=System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public static extern CompanionProxyError companion_proxy_start_listening_for_devices(CompanionProxyClientHandle client, CompanionProxyDeviceEventCallBack callback, System.IntPtr userdata);
        
        /// <summary>
        /// Stops listening for paired devices
        /// </summary>
        /// <param name="client">
        /// The companion_proxy client
        /// </param>
        /// <returns>
        /// COMPANION_PROXY_E_SUCCESS on success,
        /// or a COMPANION_PROXY_E_* error code otherwise.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute(CompanionProxyNativeMethods.LibraryName, EntryPoint="companion_proxy_stop_listening_for_devices", CallingConvention=System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public static extern CompanionProxyError companion_proxy_stop_listening_for_devices(CompanionProxyClientHandle client);
        
        /// <summary>
        /// Returns a value for the given key.
        /// </summary>
        /// <param name="client">
        /// The companion_proxy client
        /// </param>
        /// <param name="companionUdid">
        /// UDID of the (paired) companion device
        /// </param>
        /// <param name="key">
        /// The key to retrieve the value for
        /// </param>
        /// <param name="value">
        /// A pointer to a plist_t that will receive the value for the given key.
        /// The consumer is responsible for freeing the value with plist_free() when no longer needed.
        /// </param>
        /// <returns>
        /// COMPANION_PROXY_E_SUCCESS on success,
        /// COMPANION_PROXY_E_INVALID_ARG when client or paired_devices is invalid,
        /// COMPANION_PROXY_E_UNSUPPORTED_KEY if the companion device doesn't support the given key,
        /// or a COMPANION_PROXY_E_* error code otherwise.
        /// </returns>
        /// <remarks>
        /// The device closes the connection after sending the reply.
        /// </remarks>
        [System.Runtime.InteropServices.DllImportAttribute(CompanionProxyNativeMethods.LibraryName, EntryPoint="companion_proxy_get_value_from_registry", CallingConvention=System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public static extern CompanionProxyError companion_proxy_get_value_from_registry(CompanionProxyClientHandle client, [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.LPStr)] string companionUdid, [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.LPStr)] string key, out PlistHandle value);
        
        /// <summary>
        /// Start forwarding a service port on the companion device to a port on the idevice.
        /// </summary>
        /// <param name="client">
        /// The companion_proxy client
        /// </param>
        /// <param name="remotePort">
        /// remote port
        /// </param>
        /// <param name="serviceName">
        /// The name of the service that shall be forwarded
        /// </param>
        /// <param name="forwardPort">
        /// Pointer that will receive the newly-assigned port accessible via USB/Network on the idevice
        /// </param>
        /// <param name="options">
        /// PLIST_DICT with additional options. Currently known are
        /// IsServiceLowPriority (boolean) and PreferWifi (boolean).
        /// </param>
        /// <returns>
        /// COMPANION_PROXY_E_SUCCESS on success,
        /// or a COMPANION_PROXY_E_* error code otherwise.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute(CompanionProxyNativeMethods.LibraryName, EntryPoint="companion_proxy_start_forwarding_service_port", CallingConvention=System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public static extern CompanionProxyError companion_proxy_start_forwarding_service_port(CompanionProxyClientHandle client, ushort remotePort, [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.LPStr)] string serviceName, ref ushort forwardPort, PlistHandle options);
        
        /// <summary>
        /// Stop forwarding a service port between companion device and idevice.
        /// </summary>
        /// <param name="client">
        /// The companion_proxy client
        /// </param>
        /// <param name="remotePort">
        /// remote port
        /// </param>
        /// <returns>
        /// COMPANION_PROXY_E_SUCCESS on success,
        /// or a COMPANION_PROXY_E_* error code otherwise.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute(CompanionProxyNativeMethods.LibraryName, EntryPoint="companion_proxy_stop_forwarding_service_port", CallingConvention=System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public static extern CompanionProxyError companion_proxy_stop_forwarding_service_port(CompanionProxyClientHandle client, ushort remotePort);
    }
}
